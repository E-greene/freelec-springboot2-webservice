# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle
env:
  S3_BUCKET_NAME: freelec-bucket-build
  PROJECT_NAME: freelec-springboot2-webservice
  CODE_DEPLOY_APP_NAME: freelec-springboot2-webservice
  CODE_DEPLOY_GROUP_NAME: freelec-springboot2-webservice-group

name: deploy

on:
  release:
    types: [push] # push시에 자동 실행
  push:
    branches: [master] # master 브랜치에서 동작
  workflow_dispatch: # 수동으로도 실행 가능
  
  
jobs:
  build:

    runs-on: ubuntu-latest # 해당 스크립트를 작동할 OS
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3 # 프로젝트 코드를 checkout
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3 #Github Action이 실행될 OS에 Java 설치
      with:
        java-version: '11'
        distribution: 'temurin'
        #server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        #settings-path: ${{ github.workspace }} # location for the settings.xml file
  
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew # gradle wrapper를 실행할 수 있도록 실행권한 (+x)을 줌 ./gradlew를 실행하기위함
      shell: bash
      
    - name: Build with Gradle
      run: ./gradlew clean build -x test # gradle wrapper를 통해 해당 프로젝트 빌드
      shell: bash

    - name: Get current time # 해당 액션의 기준이 UTC이므로 한국시간인 KST로 하기위해 offset에 +09:00을 한다.
      uses: 1466587594/get-current-time@v2
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss
        utcOffset: "+09:00"

    - name: Show Current Time # 지정한 포맷대로 현재 시간을 보여준다.
      run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
      shell: bash

    - name: Make zip file # 프로젝트 이름으로 해당 폴더를 모두 압축
      run: zip -r ./$PROJECT_NAME.zip .
      shell: bash

    - name: Configure AWS credentials # aws에 해당 키 값으로 접속 진행
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
        aws-region: ap-northeast-2

    - name: Upload to S3 # s3에 프로젝트 이름에 해당하는 폴더에 zip파일 저장
      run: aws s3 cp --region ap-northeast-2 ./$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$PROJECT_NAME.zip

    - name: Code Deploy
      run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODE_DEPLOY_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$PROJECT_NAME.zip

    #- name: Build with Gradle
    #  uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
    #  with:
    #    arguments: build

    # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
    # the publishing section of your build.gradle
    #- name: Publish to GitHub Packages
    #  uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
    #  with:
    #    arguments: publish
    #  env:
    #    USERNAME: ${{ github.actor }}
    #    TOKEN: ${{ secrets.GITHUB_TOKEN }}
